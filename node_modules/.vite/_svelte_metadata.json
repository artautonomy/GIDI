{"compilerOptions":{"css":"external","dev":true,"hmr":true},"configFile":false,"extensions":[".svelte"],"preprocess":[{"script":"({ content, filename }) => {\r\n\t\tif (!filename) return;\r\n\r\n\t\tconst basename = path.basename(filename);\r\n\t\tif (basename.startsWith('+page.') || basename.startsWith('+layout.')) {\r\n\t\t\tconst match = content.match(options_regex);\r\n\t\t\tif (match) {\r\n\t\t\t\tconst fixed = basename.replace('.svelte', '(.server).js/ts');\r\n\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t`\\n${colors.bold().red(path.relative('.', filename))}\\n` +\r\n\t\t\t\t\t`\\`${match[1]}\\` will be ignored — move it to ${fixed} instead. See https://svelte.dev/docs/kit/page-options for more information.`;\r\n\r\n\t\t\t\tif (!warned.has(message)) {\r\n\t\t\t\t\tconsole.log(message);\r\n\t\t\t\t\twarned.add(message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}","markup":"({ content, filename }) => {\r\n\t\tif (!filename) return;\r\n\r\n\t\tconst basename = path.basename(filename);\r\n\t\tconst has_children =\r\n\t\t\tcontent.includes('<slot') || (isSvelte5Plus() && content.includes('{@render'));\r\n\r\n\t\tif (basename.startsWith('+layout.') && !has_children) {\r\n\t\t\tconst message =\r\n\t\t\t\t`\\n${colors.bold().red(path.relative('.', filename))}\\n` +\r\n\t\t\t\t`\\`<slot />\\`${isSvelte5Plus() ? ' or `{@render ...}` tag' : ''}` +\r\n\t\t\t\t' missing — inner content will not be rendered';\r\n\r\n\t\t\tif (!warned.has(message)) {\r\n\t\t\t\tconsole.log(message);\r\n\t\t\t\twarned.add(message);\r\n\t\t\t}\r\n\t\t}\r\n\t}"},{"markup":"async markup({ content, filename }) {\n\t\t\tif (!content.includes('<enhanced:img')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst s = new MagicString(content);\n\t\t\tconst ast = parse(content, { filename, modern: true });\n\n\t\t\t/**\n\t\t\t * Import path to import name\n\t\t\t * e.g. ./foo.png => __IMPORTED_ASSET_0__\n\t\t\t * @type {Map<string, string>}\n\t\t\t */\n\t\t\tconst imports = new Map();\n\n\t\t\t/**\n\t\t\t * Vite name to declaration name\n\t\t\t * e.g. __VITE_ASSET_0__ => __DECLARED_ASSET_0__\n\t\t\t * @type {Map<string, string>}\n\t\t\t */\n\t\t\tconst consts = new Map();\n\n\t\t\t/**\n\t\t\t * @param {import('svelte/compiler').AST.RegularElement} node\n\t\t\t * @param {AST.Text | AST.ExpressionTag} src_attribute\n\t\t\t * @returns {Promise<void>}\n\t\t\t */\n\t\t\tasync function update_element(node, src_attribute) {\n\t\t\t\tif (src_attribute.type === 'ExpressionTag') {\n\t\t\t\t\tconst start =\n\t\t\t\t\t\t'end' in src_attribute.expression\n\t\t\t\t\t\t\t? src_attribute.expression.end\n\t\t\t\t\t\t\t: src_attribute.expression.range?.[0];\n\t\t\t\t\tconst end =\n\t\t\t\t\t\t'start' in src_attribute.expression\n\t\t\t\t\t\t\t? src_attribute.expression.start\n\t\t\t\t\t\t\t: src_attribute.expression.range?.[1];\n\n\t\t\t\t\tif (typeof start !== 'number' || typeof end !== 'number') {\n\t\t\t\t\t\tthrow new Error('ExpressionTag has no range');\n\t\t\t\t\t}\n\t\t\t\t\tconst src_var_name = content.substring(start, end).trim();\n\n\t\t\t\t\ts.update(node.start, node.end, dynamic_img_to_picture(content, node, src_var_name));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst original_url = src_attribute.raw.trim();\n\t\t\t\tlet url = original_url;\n\n\t\t\t\tconst sizes = get_attr_value(node, 'sizes');\n\t\t\t\tconst width = get_attr_value(node, 'width');\n\t\t\t\turl += url.includes('?') ? '&' : '?';\n\t\t\t\tif (sizes && 'raw' in sizes) {\n\t\t\t\t\turl += 'imgSizes=' + encodeURIComponent(sizes.raw) + '&';\n\t\t\t\t}\n\t\t\t\tif (width && 'raw' in width) {\n\t\t\t\t\turl += 'imgWidth=' + encodeURIComponent(width.raw) + '&';\n\t\t\t\t}\n\t\t\t\turl += 'enhanced';\n\n\t\t\t\tif (OPTIMIZABLE.test(url)) {\n\t\t\t\t\t// resolves the import so that we can build the entire picture template string and don't\n\t\t\t\t\t// need any logic blocks\n\t\t\t\t\tconst resolved_id = (await opts.plugin_context.resolve(url, filename))?.id;\n\t\t\t\t\tif (!resolved_id) {\n\t\t\t\t\t\tconst file_path = url.substring(0, url.indexOf('?'));\n\t\t\t\t\t\tif (existsSync(path.resolve(opts.vite_config.publicDir, file_path))) {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`Could not locate ${file_path}. Please move it to be located relative to the page in the routes directory or reference it beginning with /static/. See https://vitejs.dev/guide/assets for more details on referencing assets.`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Could not locate ${file_path}. See https://vitejs.dev/guide/assets for more details on referencing assets.`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet image = images.get(resolved_id);\n\t\t\t\t\tif (!image) {\n\t\t\t\t\t\timage = await process(resolved_id, opts);\n\t\t\t\t\t\timages.set(resolved_id, image);\n\t\t\t\t\t}\n\t\t\t\t\ts.update(node.start, node.end, img_to_picture(consts, content, node, image));\n\t\t\t\t} else {\n\t\t\t\t\t// e.g. <img src=\"./foo.svg\" /> => <img src={__IMPORTED_ASSET_0__} />\n\t\t\t\t\tconst name = '__IMPORTED_ASSET_' + imports.size + '__';\n\t\t\t\t\tconst { start, end } = src_attribute;\n\t\t\t\t\t// update src with reference to imported asset\n\t\t\t\t\ts.update(\n\t\t\t\t\t\tis_quote(content, start - 1) ? start - 1 : start,\n\t\t\t\t\t\tis_quote(content, end) ? end + 1 : end,\n\t\t\t\t\t\t`{${name}}`\n\t\t\t\t\t);\n\t\t\t\t\t// update `enhanced:img` to `img`\n\t\t\t\t\ts.update(node.start + 1, node.start + 1 + 'enhanced:img'.length, 'img');\n\t\t\t\t\timports.set(original_url, name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @type {Array<ReturnType<typeof update_element>>}\n\t\t\t */\n\t\t\tconst pending_ast_updates = [];\n\n\t\t\twalk(\n\t\t\t\t/** @type {import('svelte/compiler').AST.Root} */ (ast),\n\t\t\t\t{},\n\t\t\t\t{\n\t\t\t\t\t_(_, { next }) {\n\t\t\t\t\t\tnext();\n\t\t\t\t\t},\n\t\t\t\t\t/** @param {import('svelte/compiler').AST.RegularElement} node */\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tRegularElement(node, { next }) {\n\t\t\t\t\t\tif ('name' in node && node.name === 'enhanced:img') {\n\t\t\t\t\t\t\t// Compare node tag match\n\t\t\t\t\t\t\tconst src = get_attr_value(node, 'src');\n\n\t\t\t\t\t\t\tif (!src || typeof src === 'boolean') return;\n\n\t\t\t\t\t\t\tpending_ast_updates.push(update_element(node, src));\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnext();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tawait Promise.all(pending_ast_updates);\n\n\t\t\t// add imports and consts to <script module> block\n\t\t\tlet text = '';\n\t\t\tif (imports.size) {\n\t\t\t\tfor (const [path, import_name] of imports.entries()) {\n\t\t\t\t\ttext += `\\timport ${import_name} from \"${path}\";\\n`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (consts.size) {\n\t\t\t\tfor (const [vite_name, declaration_name] of consts.entries()) {\n\t\t\t\t\ttext += `\\tconst ${declaration_name} = \"${vite_name}\";\\n`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ast.module) {\n\t\t\t\t// @ts-ignore\n\t\t\t\ts.appendLeft(ast.module.content.start, text);\n\t\t\t} else {\n\t\t\t\ts.prepend(\n\t\t\t\t\t`<script ${VERSION.startsWith('4') ? 'context=\"module\"' : 'module'}>${text}</script>\\n`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcode: s.toString(),\n\t\t\t\tmap: s.generateMap()\n\t\t\t};\n\t\t}"}]}