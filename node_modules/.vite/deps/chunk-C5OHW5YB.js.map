{
  "version": 3,
  "sources": ["../../svelte/src/reactivity/utils.js", "../../svelte/src/reactivity/create-subscriber.js"],
  "sourcesContent": ["/** @import { Source } from '#client' */\r\nimport { set } from '../internal/client/reactivity/sources.js';\r\n\r\n/** @param {Source<number>} source */\r\nexport function increment(source) {\r\n\tset(source, source.v + 1);\r\n}\r\n", "import { get, tick, untrack } from '../internal/client/runtime.js';\r\nimport { effect_tracking, render_effect } from '../internal/client/reactivity/effects.js';\r\nimport { source } from '../internal/client/reactivity/sources.js';\r\nimport { increment } from './utils.js';\r\n\r\n/**\r\n * Returns a `subscribe` function that, if called in an effect (including expressions in the template),\r\n * calls its `start` callback with an `update` function. Whenever `update` is called, the effect re-runs.\r\n *\r\n * If `start` returns a function, it will be called when the effect is destroyed.\r\n *\r\n * If `subscribe` is called in multiple effects, `start` will only be called once as long as the effects\r\n * are active, and the returned teardown function will only be called when all effects are destroyed.\r\n *\r\n * It's best understood with an example. Here's an implementation of [`MediaQuery`](https://svelte.dev/docs/svelte/svelte-reactivity#MediaQuery):\r\n *\r\n * ```js\r\n * import { createSubscriber } from 'svelte/reactivity';\r\n * import { on } from 'svelte/events';\r\n *\r\n * export class MediaQuery {\r\n * \t#query;\r\n * \t#subscribe;\r\n *\r\n * \tconstructor(query) {\r\n * \t\tthis.#query = window.matchMedia(`(${query})`);\r\n *\r\n * \t\tthis.#subscribe = createSubscriber((update) => {\r\n * \t\t\t// when the `change` event occurs, re-run any effects that read `this.current`\r\n * \t\t\tconst off = on(this.#query, 'change', update);\r\n *\r\n * \t\t\t// stop listening when all the effects are destroyed\r\n * \t\t\treturn () => off();\r\n * \t\t});\r\n * \t}\r\n *\r\n * \tget current() {\r\n * \t\tthis.#subscribe();\r\n *\r\n * \t\t// Return the current state of the query, whether or not we're in an effect\r\n * \t\treturn this.#query.matches;\r\n * \t}\r\n * }\r\n * ```\r\n * @param {(update: () => void) => (() => void) | void} start\r\n * @since 5.7.0\r\n */\r\nexport function createSubscriber(start) {\r\n\tlet subscribers = 0;\r\n\tlet version = source(0);\r\n\t/** @type {(() => void) | void} */\r\n\tlet stop;\r\n\r\n\treturn () => {\r\n\t\tif (effect_tracking()) {\r\n\t\t\tget(version);\r\n\r\n\t\t\trender_effect(() => {\r\n\t\t\t\tif (subscribers === 0) {\r\n\t\t\t\t\tstop = untrack(() => start(() => increment(version)));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsubscribers += 1;\r\n\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\ttick().then(() => {\r\n\t\t\t\t\t\t// Only count down after timeout, else we would reach 0 before our own render effect reruns,\r\n\t\t\t\t\t\t// but reach 1 again when the tick callback of the prior teardown runs. That would mean we\r\n\t\t\t\t\t\t// re-subcribe unnecessarily and create a memory leak because the old subscription is never cleaned up.\r\n\t\t\t\t\t\tsubscribers -= 1;\r\n\r\n\t\t\t\t\t\tif (subscribers === 0) {\r\n\t\t\t\t\t\t\tstop?.();\r\n\t\t\t\t\t\t\tstop = undefined;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;AAIO,SAAS,UAAUA,SAAQ;AACjC,MAAIA,SAAQA,QAAO,IAAI,CAAC;AACzB;;;ACyCO,SAAS,iBAAiB,OAAO;AACvC,MAAI,cAAc;AAClB,MAAI,UAAU,OAAO,CAAC;AAEtB,MAAI;AAEJ,SAAO,MAAM;AACZ,QAAI,gBAAgB,GAAG;AACtB,UAAI,OAAO;AAEX,oBAAc,MAAM;AACnB,YAAI,gBAAgB,GAAG;AACtB,iBAAO,QAAQ,MAAM,MAAM,MAAM,UAAU,OAAO,CAAC,CAAC;AAAA,QACrD;AAEA,uBAAe;AAEf,eAAO,MAAM;AACZ,eAAK,EAAE,KAAK,MAAM;AAIjB,2BAAe;AAEf,gBAAI,gBAAgB,GAAG;AACtB;AACA,qBAAO;AAAA,YACR;AAAA,UACD,CAAC;AAAA,QACF;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;",
  "names": ["source"]
}
