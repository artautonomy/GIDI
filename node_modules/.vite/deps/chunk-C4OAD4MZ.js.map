{
  "version": 3,
  "sources": ["../../three/examples/jsm/objects/Sky.js"],
  "sourcesContent": ["import {\r\n\tBackSide,\r\n\tBoxGeometry,\r\n\tMesh,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector3\r\n} from 'three';\r\n\r\n/**\r\n * Based on \"A Practical Analytic Model for Daylight\"\r\n * aka The Preetham Model, the de facto standard analytic skydome model\r\n * https://www.researchgate.net/publication/220720443_A_Practical_Analytic_Model_for_Daylight\r\n *\r\n * First implemented by Simon Wallner\r\n * http://simonwallner.at/project/atmospheric-scattering/\r\n *\r\n * Improved by Martin Upitis\r\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\r\n *\r\n * Three.js integration by zz85 http://twitter.com/blurspline\r\n*/\r\n\r\nclass Sky extends Mesh {\r\n\r\n\tconstructor() {\r\n\r\n\t\tconst shader = Sky.SkyShader;\r\n\r\n\t\tconst material = new ShaderMaterial( {\r\n\t\t\tname: shader.name,\r\n\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\r\n\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\tfragmentShader: shader.fragmentShader,\r\n\t\t\tside: BackSide,\r\n\t\t\tdepthWrite: false\r\n\t\t} );\r\n\r\n\t\tsuper( new BoxGeometry( 1, 1, 1 ), material );\r\n\r\n\t\tthis.isSky = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSky.SkyShader = {\r\n\r\n\tname: 'SkyShader',\r\n\r\n\tuniforms: {\r\n\t\t'turbidity': { value: 2 },\r\n\t\t'rayleigh': { value: 1 },\r\n\t\t'mieCoefficient': { value: 0.005 },\r\n\t\t'mieDirectionalG': { value: 0.8 },\r\n\t\t'sunPosition': { value: new Vector3() },\r\n\t\t'up': { value: new Vector3( 0, 1, 0 ) }\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\t\tuniform vec3 sunPosition;\r\n\t\tuniform float rayleigh;\r\n\t\tuniform float turbidity;\r\n\t\tuniform float mieCoefficient;\r\n\t\tuniform vec3 up;\r\n\r\n\t\tvarying vec3 vWorldPosition;\r\n\t\tvarying vec3 vSunDirection;\r\n\t\tvarying float vSunfade;\r\n\t\tvarying vec3 vBetaR;\r\n\t\tvarying vec3 vBetaM;\r\n\t\tvarying float vSunE;\r\n\r\n\t\t// constants for atmospheric scattering\r\n\t\tconst float e = 2.71828182845904523536028747135266249775724709369995957;\r\n\t\tconst float pi = 3.141592653589793238462643383279502884197169;\r\n\r\n\t\t// wavelength of used primaries, according to preetham\r\n\t\tconst vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );\r\n\t\t// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\r\n\t\t// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\r\n\t\tconst vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );\r\n\r\n\t\t// mie stuff\r\n\t\t// K coefficient for the primaries\r\n\t\tconst float v = 4.0;\r\n\t\tconst vec3 K = vec3( 0.686, 0.678, 0.666 );\r\n\t\t// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\r\n\t\tconst vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );\r\n\r\n\t\t// earth shadow hack\r\n\t\t// cutoffAngle = pi / 1.95;\r\n\t\tconst float cutoffAngle = 1.6110731556870734;\r\n\t\tconst float steepness = 1.5;\r\n\t\tconst float EE = 1000.0;\r\n\r\n\t\tfloat sunIntensity( float zenithAngleCos ) {\r\n\t\t\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );\r\n\t\t\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );\r\n\t\t}\r\n\r\n\t\tvec3 totalMie( float T ) {\r\n\t\t\tfloat c = ( 0.2 * T ) * 10E-18;\r\n\t\t\treturn 0.434 * c * MieConst;\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\t\tvWorldPosition = worldPosition.xyz;\r\n\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\t\t\tgl_Position.z = gl_Position.w; // set z to camera.far\r\n\r\n\t\t\tvSunDirection = normalize( sunPosition );\r\n\r\n\t\t\tvSunE = sunIntensity( dot( vSunDirection, up ) );\r\n\r\n\t\t\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );\r\n\r\n\t\t\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );\r\n\r\n\t\t\t// extinction (absorbtion + out scattering)\r\n\t\t\t// rayleigh coefficients\r\n\t\t\tvBetaR = totalRayleigh * rayleighCoefficient;\r\n\r\n\t\t\t// mie coefficients\r\n\t\t\tvBetaM = totalMie( turbidity ) * mieCoefficient;\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\t\tvarying vec3 vWorldPosition;\r\n\t\tvarying vec3 vSunDirection;\r\n\t\tvarying float vSunfade;\r\n\t\tvarying vec3 vBetaR;\r\n\t\tvarying vec3 vBetaM;\r\n\t\tvarying float vSunE;\r\n\r\n\t\tuniform float mieDirectionalG;\r\n\t\tuniform vec3 up;\r\n\r\n\t\t// constants for atmospheric scattering\r\n\t\tconst float pi = 3.141592653589793238462643383279502884197169;\r\n\r\n\t\tconst float n = 1.0003; // refractive index of air\r\n\t\tconst float N = 2.545E25; // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\r\n\r\n\t\t// optical length at zenith for molecules\r\n\t\tconst float rayleighZenithLength = 8.4E3;\r\n\t\tconst float mieZenithLength = 1.25E3;\r\n\t\t// 66 arc seconds -> degrees, and the cosine of that\r\n\t\tconst float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\r\n\r\n\t\t// 3.0 / ( 16.0 * pi )\r\n\t\tconst float THREE_OVER_SIXTEENPI = 0.05968310365946075;\r\n\t\t// 1.0 / ( 4.0 * pi )\r\n\t\tconst float ONE_OVER_FOURPI = 0.07957747154594767;\r\n\r\n\t\tfloat rayleighPhase( float cosTheta ) {\r\n\t\t\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );\r\n\t\t}\r\n\r\n\t\tfloat hgPhase( float cosTheta, float g ) {\r\n\t\t\tfloat g2 = pow( g, 2.0 );\r\n\t\t\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );\r\n\t\t\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec3 direction = normalize( vWorldPosition - cameraPosition );\r\n\r\n\t\t\t// optical length\r\n\t\t\t// cutoff angle at 90 to avoid singularity in next formula.\r\n\t\t\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );\r\n\t\t\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );\r\n\t\t\tfloat sR = rayleighZenithLength * inverse;\r\n\t\t\tfloat sM = mieZenithLength * inverse;\r\n\r\n\t\t\t// combined extinction factor\r\n\t\t\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );\r\n\r\n\t\t\t// in scattering\r\n\t\t\tfloat cosTheta = dot( direction, vSunDirection );\r\n\r\n\t\t\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );\r\n\t\t\tvec3 betaRTheta = vBetaR * rPhase;\r\n\r\n\t\t\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );\r\n\t\t\tvec3 betaMTheta = vBetaM * mPhase;\r\n\r\n\t\t\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );\r\n\t\t\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );\r\n\r\n\t\t\t// nightsky\r\n\t\t\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]\r\n\t\t\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]\r\n\t\t\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );\r\n\t\t\tvec3 L0 = vec3( 0.1 ) * Fex;\r\n\r\n\t\t\t// composition + solar disc\r\n\t\t\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );\r\n\t\t\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;\r\n\r\n\t\t\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );\r\n\r\n\t\t\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );\r\n\r\n\t\t\tgl_FragColor = vec4( retColor, 1.0 );\r\n\r\n\t\t\t#include <tonemapping_fragment>\r\n\t\t\t#include <colorspace_fragment>\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { Sky };\r\n"],
  "mappings": ";;;;;;;;;;AAuBA,IAAM,MAAN,MAAM,aAAY,KAAK;AAAA,EAEtB,cAAc;AAEb,UAAM,SAAS,KAAI;AAEnB,UAAM,WAAW,IAAI,eAAgB;AAAA,MACpC,MAAM,OAAO;AAAA,MACb,UAAU,cAAc,MAAO,OAAO,QAAS;AAAA,MAC/C,cAAc,OAAO;AAAA,MACrB,gBAAgB,OAAO;AAAA,MACvB,MAAM;AAAA,MACN,YAAY;AAAA,IACb,CAAE;AAEF,UAAO,IAAI,YAAa,GAAG,GAAG,CAAE,GAAG,QAAS;AAE5C,SAAK,QAAQ;AAAA,EAEd;AAED;AAEA,IAAI,YAAY;AAAA,EAEf,MAAM;AAAA,EAEN,UAAU;AAAA,IACT,aAAa,EAAE,OAAO,EAAE;AAAA,IACxB,YAAY,EAAE,OAAO,EAAE;AAAA,IACvB,kBAAkB,EAAE,OAAO,KAAM;AAAA,IACjC,mBAAmB,EAAE,OAAO,IAAI;AAAA,IAChC,eAAe,EAAE,OAAO,IAAI,QAAQ,EAAE;AAAA,IACtC,MAAM,EAAE,OAAO,IAAI,QAAS,GAAG,GAAG,CAAE,EAAE;AAAA,EACvC;AAAA,EAEA;AAAA;AAAA,IAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwExB;AAAA;AAAA,IAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqF3B;",
  "names": []
}
