import './types.d.ts';
export declare const VERSION = 8;
export { default as Canvas } from './Canvas.svelte';
export { T, extend } from './components/T/T';
export type { Props } from './components/T/types';
export { injectPlugin } from './plugins/injectPlugin';
export type { Plugin } from './plugins/types';
export { useThrelte } from './context/compounds/useThrelte';
export { useStage } from './hooks/useStage';
export { useTask, type ThrelteUseTask, type ThrelteUseTaskOptions } from './hooks/useTask';
export { useThrelteUserContext } from './hooks/useThrelteUserContext';
export type { Key, Schedule, Scheduler, Stage, Task, TaskCallback } from './frame-scheduling';
export { useLoader, type UseLoaderLoadInput, type UseLoaderLoadResult, type UseLoaderOptions } from './hooks/useLoader';
export { type ThrelteContext } from './context/compounds/useThrelte';
export { createThrelteContext } from './context/createThrelteContext.svelte';
export { createCacheContext, useCache } from './context/fragments/cache';
export { createCameraContext, useCamera } from './context/fragments/camera';
export { createCanvasContext, useCanvas } from './context/fragments/canvas';
export { createDisposalContext, useDisposal } from './context/fragments/disposal';
export { createParentContext, useParent } from './context/fragments/parent';
export { createParentObject3DContext, useParentObject3D } from './context/fragments/parentObject3D';
export { createRendererContext, useRenderer } from './context/fragments/renderer.svelte';
export { createSceneContext, useScene } from './context/fragments/scene';
export { createSchedulerContext, useScheduler } from './context/fragments/scheduler.svelte';
export * from './utilities';
