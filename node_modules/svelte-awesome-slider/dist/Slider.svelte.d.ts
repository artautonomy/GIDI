import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        /** min value of the slider */ min?: string | number;
        /** max value of the slider */ max?: string | number;
        /** step value of the slider */ step?: string | number;
        /** value of the slider */ value?: number;
        /**
             * method to convert the current value to a string representation of the value for the `aria-valuetext` attribute.
             * For example, a battery meter value might be conveyed as aria-valuetext="8% (34 minutes) remaining".
             * See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuetext)
             */ ariaValueText?: (current: number) => string;
        /** input name of the slider */ name?: string | undefined;
        /** direction of the slider */ direction?: "horizontal" | "vertical";
        /** if true, the min and max values will be reversed */ reverse?: boolean;
        /** disables mouse events */ keyboardOnly?: boolean;
        /** div element representing the slider */ slider?: HTMLDivElement | undefined;
        /** aria-label props */ ariaLabel?: string | undefined;
        /** aria-labelledby props */ ariaLabelledBy?: string | undefined;
        /** aria-controls props */ ariaControls?: string | undefined;
        /** indicate if the slider is being dragged */ isDragging?: boolean;
    };
    events: {
        input: CustomEvent<number>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export type SliderProps = typeof __propDef.props;
export type SliderEvents = typeof __propDef.events;
export type SliderSlots = typeof __propDef.slots;
/**
 * **Props**
 * @prop min: string | number = 0 — min value of the slider
 * @prop max: string | number = 100 — max value of the slider
 * @prop step: string | number = 1 — step value of the slider
 * @prop value: number = 50 — value of the slider
 * @prop ariaValueText: (current: number) =&gt; string = (current) => current.toString() — method to convert the current value to a string representation of the value for the `aria-valuetext` attribute. For example, a battery meter value might be conveyed as aria-valuetext="8% (34 minutes) remaining". See [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuetext)
 * @prop name: string | undefined = undefined — input name of the slider
 * @prop direction: 'horizontal' | 'vertical' = 'horizontal' — direction of the slider
 * @prop reverse: boolean = false — if true, the min and max values will be reversed
 * @prop keyboardOnly: boolean = false — disables mouse events
 * @prop slider: HTMLDivElement | undefined = undefined — div element representing the slider
 * @prop ariaLabel: string | undefined = undefined — aria-label props
 * @prop ariaLabelledBy: string | undefined = undefined — aria-labelledby props
 * @prop isDragging: boolean = false — indicate if the slider is being dragged
 */
export default class Slider extends SvelteComponentTyped<SliderProps, SliderEvents, SliderSlots> {
}
export {};
